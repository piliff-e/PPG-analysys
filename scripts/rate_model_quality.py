import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
from fastdtw import fastdtw
from scipy.spatial.distance import euclidean
import wfdb
from forecasting import recursive_forecast
from neuralforecast import NeuralForecast
import pandas as pd
from scipy.signal import savgol_filter
from scipy.signal import decimate

def evaluate_forecast(true_y: np.ndarray, pred_y: np.ndarray, timestamps=None, label='–ú–æ–¥–µ–ª—å'):
    """
    –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –º–∞—Å—Å–∏–≤–∞–º:
    - true_y: –º–∞—Å—Å–∏–≤ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    - pred_y: –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏
    - timestamps: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–º–∞—Å—Å–∏–≤ —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞)
    """
    assert len(true_y) == len(pred_y), f"–†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: true_y={len(true_y)}, pred_y={len(pred_y)}"
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    mae = np.mean(np.abs(pred_y - true_y))
    mse = np.mean((pred_y - true_y) ** 2)
    corr, _ = pearsonr(true_y, pred_y)

    # –í—ã–≤–æ–¥
    with open ('quality_report.txt', 'a') as f:
        f.write(f'–ß—Ç–æ –∑–Ω–∞—á–∞—Ç —ç—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏:\n')
        f.write(f'   ‚û§ MAE (Mean Absolute Error): —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏ –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\n')
        f.write(f'   ‚û§ MSE (Mean Squared Error): —Å—Ä–µ–¥–Ω—è—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –æ—Ç –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.\n')
        f.write(f'   ‚û§ Corr (Correlation): –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–µ–ø–µ–Ω—å –ª–∏–Ω–µ–π–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏ –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\n')
        f.write(f'\n')
        f.write(f'üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ ({label}):\n')
        f.write(f'   ‚û§ MAE:  {mae:.5f}\n')
        f.write(f'   ‚û§ MSE:  {mse:.5f}\n')
        f.write(f'   ‚û§ Corr: {corr:.5f}\n')
    print(f'üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ ({label}):')
    print(f'   ‚û§ MAE:  {mae:.5f}')
    print(f'   ‚û§ MSE:  {mse:.5f}')
    print(f'   ‚û§ Corr: {corr:.5f}')

    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 4))
    x = timestamps if timestamps is not None else np.arange(len(true_y))
    plt.plot(x, true_y, label='–ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    plt.plot(x, pred_y, label=f'–ü—Ä–æ–≥–Ω–æ–∑ ({label})')
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª')
    plt.legend()
    plt.grid(True)
    plt.show()

filename = 's10_sit'
record = wfdb.rdrecord(f'../test_data/{filename}')
signal = decimate(record.p_signal[:, 0], q=5)
signal = savgol_filter(signal, 15, 3)
signal = (signal - np.mean(signal)) / np.std(signal)

df = pd.DataFrame({
    'unique_id': filename,
    'ds': pd.date_range(start='2025-01-01', periods=len(signal), freq='20ms'),
    'y': signal
})
nf = NeuralForecast.load('../models/v3') 

forecasted_signal = []

for i in range(500, len(signal), 500):
    current_segment = signal[i:i + 500]
    past_segment = signal[i-500:i]
    segment_df = pd.DataFrame({
        'unique_id': "past_segment",
        'ds': pd.date_range(start='2025-01-01', periods=len(past_segment), freq='20ms'),
        'y': past_segment
    })

    forecast_segment_df = recursive_forecast(nf, segment_df, repeats=5)
    forecast_segment = forecast_segment_df['NBEATS'].values
    if len(current_segment) < 500:
        forecast_segment = forecast_segment[:len(current_segment)]
        
    forecasted_signal.append(forecast_segment)
    

true_y = signal[500:]  
pred_y = np.concatenate(forecasted_signal)  
print(f"–î–ª–∏–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {len(pred_y)}, –î–ª–∏–Ω–∞ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(true_y)}")
evaluate_forecast(true_y, pred_y, label='NBEATS')